<?php

namespace Proxies\__CG__\Beon\IntranetBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Supplier extends \Beon\IntranetBundle\Entity\Supplier implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'id', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'name', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'audiencesize', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'frequency', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'contacts', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'supplierType', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'pagesizeWidth', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'pagesizeHeight', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'typeOther', 'campaigns', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'group', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'uploads', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'city');
        }

        return array('__isInitialized__', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'id', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'name', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'audiencesize', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'frequency', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'contacts', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'supplierType', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'pagesizeWidth', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'pagesizeHeight', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'typeOther', 'campaigns', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'group', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'uploads', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Supplier' . "\0" . 'city');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Supplier $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setAudiencesize($audiencesize)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAudiencesize', array($audiencesize));

        return parent::setAudiencesize($audiencesize);
    }

    /**
     * {@inheritDoc}
     */
    public function getAudiencesize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAudiencesize', array());

        return parent::getAudiencesize();
    }

    /**
     * {@inheritDoc}
     */
    public function setContactname($contactname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContactname', array($contactname));

        return parent::setContactname($contactname);
    }

    /**
     * {@inheritDoc}
     */
    public function getContactname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContactname', array());

        return parent::getContactname();
    }

    /**
     * {@inheritDoc}
     */
    public function setFrequency($frequency)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFrequency', array($frequency));

        return parent::setFrequency($frequency);
    }

    /**
     * {@inheritDoc}
     */
    public function getFrequency()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFrequency', array());

        return parent::getFrequency();
    }

    /**
     * {@inheritDoc}
     */
    public function addContact(\Beon\IntranetBundle\Entity\Contact $contacts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addContact', array($contacts));

        return parent::addContact($contacts);
    }

    /**
     * {@inheritDoc}
     */
    public function removeContact(\Beon\IntranetBundle\Entity\Contact $contacts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeContact', array($contacts));

        return parent::removeContact($contacts);
    }

    /**
     * {@inheritDoc}
     */
    public function getContacts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContacts', array());

        return parent::getContacts();
    }

    /**
     * {@inheritDoc}
     */
    public function setSupplierType($supplierType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSupplierType', array($supplierType));

        return parent::setSupplierType($supplierType);
    }

    /**
     * {@inheritDoc}
     */
    public function getSupplierType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSupplierType', array());

        return parent::getSupplierType();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function jsonSerialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'jsonSerialize', array());

        return parent::jsonSerialize();
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeOther()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeOther', array());

        return parent::getTypeOther();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeOther($typeOther)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeOther', array($typeOther));

        return parent::setTypeOther($typeOther);
    }

    /**
     * {@inheritDoc}
     */
    public function setGroup(\Beon\IntranetBundle\Entity\SupplierGroup $group = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGroup', array($group));

        return parent::setGroup($group);
    }

    /**
     * {@inheritDoc}
     */
    public function getGroup()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroup', array());

        return parent::getGroup();
    }

    /**
     * {@inheritDoc}
     */
    public function addUpload(\Beon\IntranetBundle\Entity\Upload $uploads)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUpload', array($uploads));

        return parent::addUpload($uploads);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUpload(\Beon\IntranetBundle\Entity\Upload $uploads)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUpload', array($uploads));

        return parent::removeUpload($uploads);
    }

    /**
     * {@inheritDoc}
     */
    public function getUploads()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUploads', array());

        return parent::getUploads();
    }

    /**
     * {@inheritDoc}
     */
    public function getCampaigns()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCampaigns', array());

        return parent::getCampaigns();
    }

    /**
     * {@inheritDoc}
     */
    public function setCampaigns($campaigns)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCampaigns', array($campaigns));

        return parent::setCampaigns($campaigns);
    }

    /**
     * {@inheritDoc}
     */
    public function getCity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCity', array());

        return parent::getCity();
    }

    /**
     * {@inheritDoc}
     */
    public function setCity(\Beon\IntranetBundle\Entity\City $city = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCity', array($city));

        return parent::setCity($city);
    }

    /**
     * {@inheritDoc}
     */
    public function getPagesizeWidth()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPagesizeWidth', array());

        return parent::getPagesizeWidth();
    }

    /**
     * {@inheritDoc}
     */
    public function setPagesizeWidth($pagesizeW)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPagesizeWidth', array($pagesizeW));

        return parent::setPagesizeWidth($pagesizeW);
    }

    /**
     * {@inheritDoc}
     */
    public function getPagesizeHeight()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPagesizeHeight', array());

        return parent::getPagesizeHeight();
    }

    /**
     * {@inheritDoc}
     */
    public function setPagesizeHeight($pagesizeH)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPagesizeHeight', array($pagesizeH));

        return parent::setPagesizeHeight($pagesizeH);
    }

    /**
     * {@inheritDoc}
     */
    public function addCampaign(\Beon\IntranetBundle\Entity\Campaign $campaigns)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCampaign', array($campaigns));

        return parent::addCampaign($campaigns);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCampaign(\Beon\IntranetBundle\Entity\Campaign $campaigns)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCampaign', array($campaigns));

        return parent::removeCampaign($campaigns);
    }

}
