<?php

namespace Proxies\__CG__\Beon\IntranetBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \Beon\IntranetBundle\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'id', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'name', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'displayName', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'email', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'customer', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'customer_id', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'accessLevel', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'roles', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'group');
        }

        return array('__isInitialized__', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'id', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'name', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'displayName', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'email', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'customer', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'customer_id', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'accessLevel', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'roles', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\User' . "\0" . 'group');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayName', array());

        return parent::getDisplayName();
    }

    /**
     * {@inheritDoc}
     */
    public function getClosing()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClosing', array());

        return parent::getClosing();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayName($displayName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayName', array($displayName));

        return parent::setDisplayName($displayName);
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', array($email));

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', array());

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', array($password));

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', array());

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomer(\Beon\IntranetBundle\Entity\Customer $customer = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomer', array($customer));

        return parent::setCustomer($customer);
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomer', array());

        return parent::getCustomer();
    }

    /**
     * {@inheritDoc}
     */
    public function loadUserByUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'loadUserByUsername', array($username));

        return parent::loadUserByUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function refreshUser(\Symfony\Component\Security\Core\User\UserInterface $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'refreshUser', array($user));

        return parent::refreshUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function supportsClass($class)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'supportsClass', array($class));

        return parent::supportsClass($class);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', array());

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function getSalt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalt', array());

        return parent::getSalt();
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', array());

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function eraseCredentials()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'eraseCredentials', array());

        return parent::eraseCredentials();
    }

    /**
     * {@inheritDoc}
     */
    public function serialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'serialize', array());

        return parent::serialize();
    }

    /**
     * {@inheritDoc}
     */
    public function unserialize($serialized)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unserialize', array($serialized));

        return parent::unserialize($serialized);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function isEqualTo(\Symfony\Component\Security\Core\User\UserInterface $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEqualTo', array($user));

        return parent::isEqualTo($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getCredentials()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCredentials', array());

        return parent::getCredentials();
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function isAuthenticated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAuthenticated', array());

        return parent::isAuthenticated();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthenticated($isAuthenticated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthenticated', array($isAuthenticated));

        return parent::setAuthenticated($isAuthenticated);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributes', array());

        return parent::getAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttributes(array $attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttributes', array($attributes));

        return parent::setAttributes($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function hasAttribute($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAttribute', array($name));

        return parent::hasAttribute($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttribute($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttribute', array($name));

        return parent::getAttribute($name);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttribute($name, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttribute', array($name, $value));

        return parent::setAttribute($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function isGranted($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isGranted', array($role));

        return parent::isGranted($role);
    }

    /**
     * {@inheritDoc}
     */
    public function isCustomerValid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCustomerValid', array());

        return parent::isCustomerValid();
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomerId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomerId', array());

        return parent::getCustomerId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomerId($customer_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomerId', array($customer_id));

        return parent::setCustomerId($customer_id);
    }

    /**
     * {@inheritDoc}
     */
    public function setAccessLevel(\Beon\IntranetBundle\Entity\AccessLevel $accessLevel = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccessLevel', array($accessLevel));

        return parent::setAccessLevel($accessLevel);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccessLevel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccessLevel', array());

        return parent::getAccessLevel();
    }

    /**
     * {@inheritDoc}
     */
    public function getGroup()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroup', array());

        return parent::getGroup();
    }

    /**
     * {@inheritDoc}
     */
    public function setGroup($group)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGroup', array($group));

        return parent::setGroup($group);
    }

}
