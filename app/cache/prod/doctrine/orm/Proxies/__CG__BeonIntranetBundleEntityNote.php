<?php

namespace Proxies\__CG__\Beon\IntranetBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Note extends \Beon\IntranetBundle\Entity\Note implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'id', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'type', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'text', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'date', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'createdat', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'user', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'customer', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'task', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'internalUseOnly', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'uploads', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'pressrelease', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'campaign', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'complaint', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'monitoredurl', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'date1', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'date2');
        }

        return array('__isInitialized__', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'id', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'type', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'text', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'date', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'createdat', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'user', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'customer', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'task', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'internalUseOnly', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'uploads', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'pressrelease', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'campaign', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'complaint', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'monitoredurl', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'date1', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Note' . "\0" . 'date2');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Note $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setText($text)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setText', array($text));

        return parent::setText($text);
    }

    /**
     * {@inheritDoc}
     */
    public function getText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getText', array());

        return parent::getText();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedat', array());

        return parent::getCreatedat();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Beon\IntranetBundle\Entity\User $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomer(\Beon\IntranetBundle\Entity\Customer $customer = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomer', array($customer));

        return parent::setCustomer($customer);
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomer', array());

        return parent::getCustomer();
    }

    /**
     * {@inheritDoc}
     */
    public function addUpload(\Beon\IntranetBundle\Entity\Upload $uploads)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUpload', array($uploads));

        return parent::addUpload($uploads);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUpload(\Beon\IntranetBundle\Entity\Upload $uploads)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUpload', array($uploads));

        return parent::removeUpload($uploads);
    }

    /**
     * {@inheritDoc}
     */
    public function getUploads()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUploads', array());

        return parent::getUploads();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedat($createdat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedat', array($createdat));

        return parent::setCreatedat($createdat);
    }

    /**
     * {@inheritDoc}
     */
    public function setPressrelease(\Beon\IntranetBundle\Entity\Pressrelease $pressrelease = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPressrelease', array($pressrelease));

        return parent::setPressrelease($pressrelease);
    }

    /**
     * {@inheritDoc}
     */
    public function getPressrelease()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPressrelease', array());

        return parent::getPressrelease();
    }

    /**
     * {@inheritDoc}
     */
    public function setCampaign(\Beon\IntranetBundle\Entity\Campaign $campaign = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCampaign', array($campaign));

        return parent::setCampaign($campaign);
    }

    /**
     * {@inheritDoc}
     */
    public function getCampaign()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCampaign', array());

        return parent::getCampaign();
    }

    /**
     * {@inheritDoc}
     */
    public function setComplaint(\Beon\IntranetBundle\Entity\Complaint $complaint = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setComplaint', array($complaint));

        return parent::setComplaint($complaint);
    }

    /**
     * {@inheritDoc}
     */
    public function getComplaint()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComplaint', array());

        return parent::getComplaint();
    }

    /**
     * {@inheritDoc}
     */
    public function getTask()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTask', array());

        return parent::getTask();
    }

    /**
     * {@inheritDoc}
     */
    public function setTask($task)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTask', array($task));

        return parent::setTask($task);
    }

    /**
     * {@inheritDoc}
     */
    public function getInternalUseOnly()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInternalUseOnly', array());

        return parent::getInternalUseOnly();
    }

    /**
     * {@inheritDoc}
     */
    public function setInternalUseOnly($internalUseOnly)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInternalUseOnly', array($internalUseOnly));

        return parent::setInternalUseOnly($internalUseOnly);
    }

    /**
     * {@inheritDoc}
     */
    public function setMonitoredurl(\Beon\IntranetBundle\Entity\MonitoredUrl $monitoredurl = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMonitoredurl', array($monitoredurl));

        return parent::setMonitoredurl($monitoredurl);
    }

    /**
     * {@inheritDoc}
     */
    public function getMonitoredurl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMonitoredurl', array());

        return parent::getMonitoredurl();
    }

    /**
     * {@inheritDoc}
     */
    public function setType(\Beon\IntranetBundle\Entity\EnumValue $type = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', array($type));

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', array());

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', array($date));

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', array());

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate1($date1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate1', array($date1));

        return parent::setDate1($date1);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate1', array());

        return parent::getDate1();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate2($date2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate2', array($date2));

        return parent::setDate2($date2);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate2', array());

        return parent::getDate2();
    }

    /**
     * {@inheritDoc}
     */
    public function validate(\Symfony\Component\Validator\Context\ExecutionContextInterface $context)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validate', array($context));

        return parent::validate($context);
    }

}
