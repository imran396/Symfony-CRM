<?php

namespace Proxies\__CG__\Beon\IntranetBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Complaint extends \Beon\IntranetBundle\Entity\Complaint implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'id', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'subject', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'body', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'channel', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'outletReceivedAt', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'beonReceivedAt', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'proposal', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'respondedAt', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'notifiedAt', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'resolutiondAt', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'status', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'resolution', 'user', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'customer', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'notes', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'tasks');
        }

        return array('__isInitialized__', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'id', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'subject', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'body', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'channel', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'outletReceivedAt', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'beonReceivedAt', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'proposal', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'respondedAt', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'notifiedAt', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'resolutiondAt', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'status', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'resolution', 'user', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'customer', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'notes', '' . "\0" . 'Beon\\IntranetBundle\\Entity\\Complaint' . "\0" . 'tasks');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Complaint $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubject($sublect)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubject', array($sublect));

        return parent::setSubject($sublect);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubject', array());

        return parent::getSubject();
    }

    /**
     * {@inheritDoc}
     */
    public function setBody($body)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBody', array($body));

        return parent::setBody($body);
    }

    /**
     * {@inheritDoc}
     */
    public function getBody()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBody', array());

        return parent::getBody();
    }

    /**
     * {@inheritDoc}
     */
    public function setChannel($channel)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChannel', array($channel));

        return parent::setChannel($channel);
    }

    /**
     * {@inheritDoc}
     */
    public function getChannel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChannel', array());

        return parent::getChannel();
    }

    /**
     * {@inheritDoc}
     */
    public function setOutletReceivedAt($outletReceivedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOutletReceivedAt', array($outletReceivedAt));

        return parent::setOutletReceivedAt($outletReceivedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getOutletReceivedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOutletReceivedAt', array());

        return parent::getOutletReceivedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setBeonReceivedAt($beonReceivedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBeonReceivedAt', array($beonReceivedAt));

        return parent::setBeonReceivedAt($beonReceivedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getBeonReceivedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBeonReceivedAt', array());

        return parent::getBeonReceivedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setRespondedAt($respondedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRespondedAt', array($respondedAt));

        return parent::setRespondedAt($respondedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getRespondedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRespondedAt', array());

        return parent::getRespondedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCustomer(\Beon\IntranetBundle\Entity\Customer $customer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCustomer', array($customer));

        return parent::setCustomer($customer);
    }

    /**
     * {@inheritDoc}
     */
    public function getCustomer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCustomer', array());

        return parent::getCustomer();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function addNote(\Beon\IntranetBundle\Entity\Note $notes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addNote', array($notes));

        return parent::addNote($notes);
    }

    /**
     * {@inheritDoc}
     */
    public function removeNote(\Beon\IntranetBundle\Entity\Note $notes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeNote', array($notes));

        return parent::removeNote($notes);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotes', array());

        return parent::getNotes();
    }

    /**
     * {@inheritDoc}
     */
    public function addTask(\Beon\IntranetBundle\Entity\Task $tasks)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTask', array($tasks));

        return parent::addTask($tasks);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTask(\Beon\IntranetBundle\Entity\Task $tasks)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTask', array($tasks));

        return parent::removeTask($tasks);
    }

    /**
     * {@inheritDoc}
     */
    public function getTasks()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTasks', array());

        return parent::getTasks();
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Beon\IntranetBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getResolution()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResolution', array());

        return parent::getResolution();
    }

    /**
     * {@inheritDoc}
     */
    public function setResolution($resolution)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResolution', array($resolution));

        return parent::setResolution($resolution);
    }

    /**
     * {@inheritDoc}
     */
    public function getProposal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProposal', array());

        return parent::getProposal();
    }

    /**
     * {@inheritDoc}
     */
    public function setProposal($proposal)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProposal', array($proposal));

        return parent::setProposal($proposal);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotifiedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotifiedAt', array());

        return parent::getNotifiedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotifiedAt($notifiedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotifiedAt', array($notifiedAt));

        return parent::setNotifiedAt($notifiedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getResolutiondAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResolutiondAt', array());

        return parent::getResolutiondAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setResolutiondAt($resolutiondAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResolutiondAt', array($resolutiondAt));

        return parent::setResolutiondAt($resolutiondAt);
    }

}
