<?php

namespace Beon\IntranetBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Beon\IntranetBundle\Entity\FacebookUrl;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * FacebookUrlRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FacebookUrlRepository extends EntityRepository
{

    /**
    * Lists all Time Tracking entities based on task.
    *
    */
    public function getReport($input)
    {
	
	    $qb = $this->createQueryBuilder( 'f' );
        $qb->select('f, MAX(flc.likecount) as max_likes, MIN(flc.likecount) as min_likes');
	    $qb->leftjoin('f.facebooklikecounts', 'flc');
	    $qb->leftjoin('f.customerfacebookurls', 'cfu');
	    $qb->andWhere('cfu.isOwn = :isOwn');
	    $qb->setParameter('isOwn', 1);
        $qb->groupBy('f.id');
	    $qb->orderby('max_likes', 'desc');
	    $result = $this->restrictQbByTime($qb, $input)->getQuery()->getResult();
	
	    return $result;

    }

    public function saveUrl($customer){

          $fbUrl = $this->cleanUpFbUrl($customer->getFacebookurl());
          $fbUrlAlias = $this->createAlias($fbUrl);
          $entity = new FacebookUrl();
          $entity->setUrl($fbUrl);
          $entity->setAlias(  $fbUrlAlias);
          $this->_em->persist($entity);
          $this->_em->flush();
          return $entity;

    }

    /**
     * @param $fbUrl
     * @return array
     */
    public function createAlias($facebookUrl)
    {
        $fbUrl = $this->cleanUpFbUrl($facebookUrl);
        $fbUrlArray = explode('facebook.com/', $fbUrl);
        $fbUrlAlias = explode('pages/', $fbUrlArray[1]);

        if (sizeof($fbUrlAlias) == 2) {
            $fbUrlAliasArray = explode('/', $fbUrlAlias[1]);
            $alias = $fbUrlAliasArray[0];
        } else {
            $alias = $fbUrlAlias[0];
        }

        return urldecode(rtrim($alias, '/'));
    }

    public function checkDuplicateUrl($alias){
       return $this->findOneBy(array( 'alias'=> $alias));
    }


   public function cleanUpFbUrl($url){
        $url = explode('?',$url);
        return $url[0];
    }
    
    private function restrictQbByTime($qb, $input) {
        if (isset($input['from'])) {
           $qb->andWhere('flc.date >= :fromDate');
           $qb->setParameter(':fromDate', $input['from']);
        }

        if (isset($input['to'])) {
           $qb->andWhere('flc.date <= :toDate');
           $qb->setParameter(':toDate', $input['to']);
        }
        return $qb;
    }
}
