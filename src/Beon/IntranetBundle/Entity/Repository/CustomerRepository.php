<?php
namespace Beon\IntranetBundle\Entity\Repository;

use Beon\IntranetBundle\Entity\User;
use Beon\IntranetBundle\Enums\CustomerLevelEnum;
use Beon\IntranetBundle\Entity\Customer;
use Doctrine\ORM\QueryBuilder;


/**
 * CompanyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerRepository extends FilteredRepository
{

    const ITEMS_ON_PAGE = 10;


    public function getRelativeStakeHoldersWithBounds($top, $bottom, $customer)
    {
        $qb = $this->createQueryBuilder('c');

        $children = $this->findChildren($bottom, $customer);
        $parents = $this->findParents($top, $customer);

        var_dump($parents);
    }

    public function findChildren($bottom, $customer)
    {
        /** @var $customer Customer */
        static $children = [];

        if ($customer->getLevel() > $bottom) {
            return $children;
        }


        $qb = $this
            ->createQueryBuilder('c')
            ->where('c.parent = :parent')
            ->setParameter(':parent', $customer->getId())
            ->andWhere('c.level<=:level')
            ->setParameter(':level', $bottom);

        /** @var $result Customer[] */
        $result = $qb->getQuery()->getResult();
        $children = array_merge($children, $result);

        foreach ($result as $value) {
            $this->findChildren($bottom, $value);
        }

        return $children;
    }

    public function findParents($top, $customer)
    {
        /** @var $customer Customer */
        static $parents = [];

        if (!$customer->getParent() || $customer->getParent()->getLevel() < $top) {
            return $parents;
        }

        $parents[] = $customer->getParent();

        return $parents;
    }

    public function getAll()
    {
        return $this->findAll();
    }


    public function qbAllContracts($level)
    {
        $qb = $this->createQueryBuilder('c');
        $searchLevel = $this->resolveLevel($level);

        if ($level > 2 && $level < 5) {
            $qb = $qb->andWhere('c.level<=:level')
                ->setParameter(':level', $searchLevel);
        } else {
            $qb = $qb->andWhere('c.level=:level')
                ->setParameter(':level', $searchLevel);
        }

        return $qb;
    }

    public static function resolveLevel($level)
    {
        $searchLevel = PHP_INT_MAX;

        switch ($level) {
            case 1:
                $searchLevel = 0;
                break;
            case 2:
                $searchLevel = 1;
                break;
            case 3:
            case 4:
                $searchLevel = 2;
                break;
        }

        return $searchLevel;
    }

    public function getCustomersForLevel($id, $level)
    {

        $searchLevel = self::resolveLevel($level);

        $qb = $this
            ->createQueryBuilder('c')
            ->where('c.level=:level')
            ->setParameter(':level', $searchLevel);

        if ($id > 0) {
            $qb = $qb->andWhere('c.id != :customerId')
                ->setParameter(':customerId', $id);
        }

        return $qb->getQuery()->getResult();
    }

    private function findUser(QueryBuilder $qb, $user)
    {
        /** @var $user User */
        if ($user && $user->getCustomer()) {
            $qb->andWhere('c.id = :customer')->setParameter('customer', $user->getCustomer()->getId());
        }

        return $qb;
    }

    private function setPage(QueryBuilder $qb, $page)
    {
        return $qb = $qb
            ->setMaxResults(self::ITEMS_ON_PAGE)
            ->setFirstResult($page * self::ITEMS_ON_PAGE);
    }

    private function setLevel(QueryBuilder $qb, $level)
    {

        if ($level !== null) {
            $qb = $qb->andWhere('c.level=:level')
                ->setParameter(':level', $level);
        }

        if ($this->getPlainTextFilter()) {
            $qb->andWhere('c.id = :id OR c.name LIKE :query');
            $qb->setParameter('id', intval($this->getPlainTextFilter()));
            $qb->setParameter('query', '%' . $this->getPlainTextFilter() . '%');
        }

        return $qb;
    }

    public function getCanceledContractsCount($level)
    {
        return $this->qbCanceledContracts($level)->select('count(c.id)')->getQuery()->getSingleScalarResult();
    }


    private function qbCanceledContracts($level)
    {
        $qb = $this->createQueryBuilder('c')
            ->where('c.contractend > :currentDate')
            ->setParameter('currentDate', new \DateTime());

        $qb = $this->setLevel($qb, $level);

        return $qb;
    }

    public function findCanceledContracts($user, $page, $level)
    {
        $qb = $this->qbCanceledContracts($level)->orderBy('c.name');
        $qb = $this->findUser($qb, $user);
        $qb = $this->setPage($qb, $page);

        return $qb->getQuery()->getResult();
    }

    private function qbAchievedContracts($level)
    {
        $qb = $this->createQueryBuilder('c')
            ->where('c.contractend < :currentDate')
            ->setParameter('currentDate', new \DateTime());

        $qb = $this->setLevel($qb, $level);

        return $qb;
    }

    public function getAchievedContractsCount($level)
    {
        return $this->qbAchievedContracts($level)->select('count(c.id)')->getQuery()->getSingleScalarResult();
    }

    public function findAchievedContracts($user, $page, $level)
    {
        $qb = $this->qbAchievedContracts($level)->orderBy('c.name');
        $qb = $this->findUser($qb, $user);
        $qb = $this->setPage($qb, $page);

        return $qb->getQuery()->getResult();
    }

    private function qbRunningContracts($level)
    {
        $qb = $this->createQueryBuilder('c')
            ->where('c.contractend is NULL');

        $qb = $this->setLevel($qb, $level);

        return $qb;
    }

    public function getRunningContractsCount($level)
    {
        return $this->qbAchievedContracts($level)->select('count(c.id)')->getQuery()->getSingleScalarResult();
    }

    public function findRunningContracts($user, $page, $level)
    {
        $qb = $this->qbRunningContracts($level)->orderBy('c.name');
        $qb = $this->findUser($qb, $user);
        $qb = $this->setPage($qb, $page);

        return $qb->getQuery()->getResult();
    }


    public function getRunningContractsPagesCount($level, $user = null, $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        $qb = $this->qbRunningContracts($level)->select('count(c.id)');
        $qb = $this->findUser($qb, $user);

        return ceil(
            $qb->getQuery()->getSingleScalarResult() / $itemsOnPage
        );
    }

    public function getCanceledContractsPagesCount($level, $user = null, $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        $qb = $this->qbCanceledContracts($level)->select('count(c.id)');
        $qb = $this->findUser($qb, $user);

        return ceil(
            $qb->getQuery()->getSingleScalarResult() / $itemsOnPage
        );
    }

    public function getAchievedContractsPagesCount($level, $user = null, $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        $qb = $this->qbAchievedContracts($level)->select('count(c.id)');
        $qb = $this->findUser($qb, $user);

        return ceil(
            $qb->getQuery()->getSingleScalarResult() / $itemsOnPage
        );
    }

    public function getQbStakeholdersWithCustomerType()
    {
        $qb = $this->createQueryBuilder('c')->where('c.level = 2');
        return $qb;
    }

    public function findStakeholdersRegardingToLevel($customer)
    {
        $customers = [$customer];

        /** @var $customer Customer */
        switch ($customer->getLevel()) {
/*
            case CustomerLevelEnum::AFFILIATION_TYPE_GROUP:
                $customers = array_merge($customers, $this->findChildren(1, $customer));
                break;
            case CustomerLevelEnum::AFFILIATION_TYPE:
                $customers = array_merge($customers, $this->findChildren(2, $customer));
                break;
*/
            case CustomerLevelEnum::CUSTOMER:
                $customers = array_merge($customers, $this->findChildren(4, $customer));
                break;
            case CustomerLevelEnum::PROJECT:
                break;
            case CustomerLevelEnum::COOPERATION:
                break;
        }

        return $customers;

    }

    public function getStakeholdersChildrenRegardingToLevel($Stakeholder)
    {
        $stakeholderChild = [];
        $sid = $Stakeholder->getId();
        switch ($Stakeholder->getLevel()) {
            case CustomerLevelEnum::AFFILIATION_TYPE_GROUP:
                $stakeholderChild['affiliationType'] = $this->getChildren($sid, CustomerLevelEnum::AFFILIATION_TYPE);
                $stakeholderChild['project'] = $this->getChildren($sid, CustomerLevelEnum::PROJECT);
                $stakeholderChild['cooperation'] = $this->getChildren($sid, CustomerLevelEnum::COOPERATION);
                break;
            case CustomerLevelEnum::AFFILIATION_TYPE:
                $stakeholderChild['project'] = $this->getChildren($sid, CustomerLevelEnum::PROJECT);
                $stakeholderChild['cooperation'] = $this->getChildren($sid, CustomerLevelEnum::COOPERATION);
                $stakeholderChild['customer'] = $this->getChildren($sid, CustomerLevelEnum::CUSTOMER);
                break;
            case CustomerLevelEnum::CUSTOMER:
                $stakeholderChild['project'] = $this->getChildren($sid, CustomerLevelEnum::PROJECT);
                $stakeholderChild['cooperation'] = $this->getChildren($sid, CustomerLevelEnum::COOPERATION);
                break;
            case CustomerLevelEnum::PROJECT:
                break;
            case CustomerLevelEnum::COOPERATION:
                break;
        }

        return $stakeholderChild;
    }

    public function getChildren($parent, $level, $isRunning = false)
    {

        $db = $this->createQueryBuilder('c')
            ->Where('c.parent = :parent')
            ->setParameter(':parent', $parent)
            ->andWhere('c.level = :level')
            ->setParameter(':level', $level);
        if($isRunning){
            $db->andWhere('c.contractend is NULL');
        }

        return $db->getQuery()->getResult();
    }

    public function getCompleteChildParentMapUp($cidList) {
        if (!is_array($cidList)) {
            $cidList = array($cidList);
        }
        $result = $this->createQueryBuilder('c')
            ->select( 'c.id as cid, IDENTITY(c.parent) as parent' )
            ->where('c.id IN (:cidList)')
            ->setParameter(':cidList', $cidList)
            ->getQuery()
            ->getResult();

        $needsRerun = false;
        $ret = array();
        foreach ($result as $row) {
            $ret[$row['cid']] = $row['parent'];
            if ($row['parent'] && !in_array($row['parent'], $cidList)) {
                $cidList[] = $row['parent'];
                $needsRerun = true;
            }
        }

        if ($needsRerun) {
            return $this->getCompleteChildParentMapUp($cidList);
        } else {
            return $ret;
        }
    }

    public function getCompleteChildParentMapDown($parentList) {
        if (!is_array($parentList)) {
            $parentList = array($parentList);
        }
        $result = $this->createQueryBuilder('c')
            ->select( 'c.id as cid, IDENTITY(c.parent) as parent' )
            ->where('c.parent IN (:parentList)')
            ->setParameter(':parentList', $parentList)
            ->getQuery()
            ->getResult();

        $needsRerun = false;
        $ret = array();
        foreach ($result as $row) {
            $ret[$row['cid']] = $row['parent'];
            if ($row['cid'] && !in_array($row['cid'], $parentList)) {
                $parentList[] = $row['cid'];
                $needsRerun = true;
            }
        }

        if ($needsRerun) {
            return $this->getCompleteChildParentMapDown($parentList);
        } else {
            return $ret;
        }
    }


    public function getCids($cidList) {
        $db = $this->createQueryBuilder('c')
            ->where('c.id IN (:cidList)')
            ->setParameter(':cidList', $cidList);

        return $db->getQuery()->getResult();
    }

    public function getCustomerForContactRelation($customers)
    {
        $customerArray = array();

        foreach($customers as $customer){
            $customerArray[] =  $customer->getId();
        }

        $qb = $this
            ->createQueryBuilder('c');

        if(!empty($customerArray)){
            $qb->where("c.id   NOT IN (:customers)")
                ->setParameter('customers', array_values($customerArray));
        }

        return $qb;
    }

}
