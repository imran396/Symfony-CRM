<?php

namespace Beon\IntranetBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Beon\IntranetBundle\Enums\LogActionEnum;
/**
 * Log Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LogRepository extends EntityRepository
{
    const ITEMS_ON_PAGE = 10;

    public function getLastLoginTime($user,$action)
    {
        return $this
            ->createQueryBuilder('n')
            ->select('MAX(n.createdAt)')
            ->where('n.user	 = :user')
            ->andWhere('n.action = :action')
            ->setParameter('user', $user)
            ->setParameter('action', $action)
            ->setMaxResults(1)
            ->getQuery()
            ->getSingleResult();
    }

    public function getNumberOfSuccessfullLogin($user, $action = 0)
    {
        $end = new \DateTime();
        $start = $end->sub(new \DateInterval('P30D')) ;
        $currentDate = new \DateTime();
        return $this
            ->createQueryBuilder('n')
            ->select('count(n.id) as totalSuccessfullLogin')
            ->where('n.user	 = :user')
            ->andWhere('n.action = :action')
            ->andWhere('n.createdAt BETWEEN :start AND :end')
            ->setParameter('user', $user)
            ->setParameter('action', $action)
            ->setParameter('start', $start)
            ->setParameter('end', $currentDate)
            ->getQuery()
            ->setMaxResults(1)
            ->getSingleResult();
    }

    public function getUrlLog( $id = NULL, $page = 0, 
        $type = 'facebookurl' ) {
          if( empty( $id ) )
              return FALSE;
            
        $qb = $this->createQueryBuilder( 'l' );

        if( $type == 'facebookurl' )
        {
            $qb->where( 'l.facebookurl = :eid' );
        } else if( $type == 'monitoredurl' )
        {
            $qb->where( 'l.monitoredurl = :eid' );
        }
              
         return $qb->setParameter( 'eid', $id )
                    ->getQuery()
                    ->setMaxResults( self::ITEMS_ON_PAGE )
                    ->setFirstResult( $page * self::ITEMS_ON_PAGE )
                    ->getResult();

   }

   public function getUrlPageCount( $id = NULL, $type = 'facebookurl' )
   {
        if( empty( $id ) )
              return FALSE;

        $qb = $this->createQueryBuilder( 'l' )
            ->select( 'count(l.id)' );

        if( $type == 'facebookurl' )
        {
            $qb->where( 'l.facebookurl = :eid' );
        } else if( $type == 'monitoredurl' )
        {
            $qb->where( 'l.monitoredurl = :eid' );
        }

        $itemsCount = $qb->setParameter( 'eid', $id )
                         ->getQuery()
                         ->getSingleScalarResult();

        return ceil( $itemsCount / self::ITEMS_ON_PAGE );
   }

    public function getApprovalLogs($entity,$entityName) {
        $query = $this->createQueryBuilder('l')
            ->where("l.$entityName = :entity")
            ->setParameter('entity', $entity)
            ->groupBy('l.user, l.createdAt, l.action')
            ->orderBy('l.createdAt', 'ASC')
            ->getQuery();

        return  $query->getResult();
    }

    public function getContactSentLogs($entity,$entityName,$action){

        $query = $this->createQueryBuilder('l')
            ->where("l.$entityName = :entity")
            ->andWhere('l.action = :action')
            ->setParameter('entity', $entity)
            ->setParameter('action', $action)
            ->orderBy('l.createdAt', 'ASC')
            ->getQuery();

        return  $query->getResult();
    }
}
