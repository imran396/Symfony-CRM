<?php

namespace Beon\IntranetBundle\Entity\Repository;

use Beon\IntranetBundle\IntranetBundle;
use Doctrine\ORM\EntityRepository;
use Beon\IntranetBundle\Enums\UserGroupEnum;
use Beon\IntranetBundle\Enums\CustomerLevelEnum;
use Beon\IntranetBundle\Enums\TimetrackingTariffEnum;
use Beon\IntranetBundle\Entity\BudgetPeriod;

/**
 * Timetracking Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TimetrackingRepository extends FilteredRepository
{
	/**
	* Lists all Time Tracking entities based on task.
	*
	*/
	public function findByRange($input)
	{    
	    $qb = $this->createQueryBuilder( 't' );
        self::restrictQbByTime($qb, $input);
        self::restrictQbByRole($qb);
	    return $qb->getQuery()->getResult();
	}
	
	/**
	* Lists all Time Tracking entities based on task.
	*
	*/
	public function findByTask($taskEntity)
	{    
	    $qb = $this->createQueryBuilder( 't' )
	        ->where('t.task=:taskEntity')
    	    ->setParameter('taskEntity', $taskEntity);

        self::restrictQbByRole($qb);	    
	    return $qb->getQuery()->execute();
    
	}
	
	public function getUsersTimeReport( $input = NULL )
	{
	    $qb = $this->createQueryBuilder( 't' );
	    $qb
		->select(array('t', 'IDENTITY(t.tariff)') )
		->innerJoin( 't.user', 'u');

        self::restrictQbByTime($qb, $input);
        self::restrictQbByRole($qb, true);
	    $result = $qb->getQuery()->getResult();

	    $rootNode = new TimeTrackingHierarchyItem();

	    // build group lookup table
	    $groups = array();
	    foreach(UserGroupEnum::getTitles() as $key => $label) {
		    if ($key != UserGroupEnum::CUSTOMERS) {
		        $groups[$key] = new TimeTrackingHierarchyItem();
		        $groups[$key]->setLabel($label);
		    }
	    }

	    // create user level items
	    $users = array();
	    foreach ($result as $record) {
            $user = $record[0]->getUser();
		    if (array_key_exists($user->getId(), $users)) {
		        $currentItem = $users[$user->getId()];
		    } else {
		        $currentItem = new TimeTrackingHierarchyItem();
		        $currentItem->setLabel($user->getDisplayName());
		        $users[$user->getId()] = $currentItem;
		        $groups[$user->getGroup()]->addChild($currentItem);
		    }
		    $currentItem->addHours($record[0]->getHours(), $record[1]);
	    }

        // add non-empty groups
        foreach ($groups as $group) {
            if (!$group->isEmpty()) {
                $rootNode->addChild($group);
            }
        }

	    return $rootNode;
    }
	
    public function getCustomersTimeReport( $input = NULL )
    {
        $qb = $this->createQueryBuilder( 't' );
        $qb->select(array('t', 'IDENTITY(t.tariff)'));
        $qb->leftJoin('t.customer', 'c')
           ->leftJoin('t.task', 'task')
           ->leftJoin('t.campaign', 'campaign');

        self::restrictQbByTime($qb, $input);
        self::restrictQbByRole($qb);

        $results = $qb->getQuery()->getResult();

        // build preliminary cid/tid/aid lookup table
        $cidLookup = array();
        $aidLookup = array();
        $tidLookup = array();
        $noStakeholderItem = new TimeTrackingHierarchyItem();
        $noStakeholderItem->setLabel('Unbekannt');
        foreach ($results as $row) {
            $ttentry = $row[0];
            if ($ttentry->getCustomer()) {
                $cid = $ttentry->getCustomer()->getId();
                if (array_key_exists($cid, $cidLookup)) {
                    $currentStakeholderItem = $cidLookup[$cid];
                } else {
                    $currentStakeholderItem = new TimeTrackingHierarchyItem();
                    $cidLookup[$cid] = $currentStakeholderItem;
                }
            } else {
                $currentStakeholderItem = $noStakeholderItem;
            }
            if ($ttentry->getCampaign()) {
                $aid = $ttentry->getCampaign()->getId();
                if (array_key_exists($aid, $aidLookup)) {
                    $currentCampaignItem = $aidLookup[$aid];
                } else {
                    $currentCampaignItem = new TimeTrackingHierarchyItem();
                    $currentCampaignItem->setLabel($ttentry->getCampaign()->__toString());
                    $aidLookup[$aid] = $currentCampaignItem;
                    $currentStakeholderItem->addChild($currentCampaignItem);
                }
                $currentCampaignItem->addHours($ttentry->getHours(), $row[1]);
            } else if ($ttentry->getTask()) {
                $tid = $ttentry->getTask()->getId();
                if (array_key_exists($tid, $tidLookup)) {
                    $currentTaskItem = $tidLookup[$tid];
                } else {
                    $currentTaskItem = new TimeTrackingHierarchyItem();
                    $currentTaskItem->setLabel($ttentry->getTask()->__toString());
                    $tidLookup[$tid] = $currentTaskItem;
                    $currentStakeholderItem->addChild($currentTaskItem);
                }
                $currentTaskItem->addHours($ttentry->getHours(), $row[1]);
            } else {
                $currentStakeholderItem->addHours($ttentry->getHours(), $row[1]);
            }
        }

        // fetch complete child->parent map including "grand-parents"
        $parentChildMap = $this->getEntityManager()->getRepository('IntranetBundle:Customer')->getCompleteChildParentMapUp(array_keys($cidLookup));

        // complete cid lookuptable
        $stakeholders = $this->getEntityManager()->getRepository('IntranetBundle:Customer')->getCids(array_keys($parentChildMap));
        foreach ($stakeholders as $stakeholder) {
            if (!array_key_exists($stakeholder->getId(), $cidLookup)) {
                $cidLookup[$stakeholder->getId()] = new TimeTrackingHierarchyItem();
            }
            $cidLookup[$stakeholder->getId()]->setLabel($stakeholder->__toString());
        }     

        // stitch hierarchy together
        $rootNode = new TimeTrackingHierarchyItem();
        foreach ($parentChildMap as $cid => $parent) {
            $currentItem = $cidLookup[$cid];
            if ($parent) {
                $cidLookup[$parent]->addChild($currentItem);
            } else {
                $rootNode->addChild($currentItem);
            }
        }

        if (!$noStakeholderItem->isEmpty()) {
            $rootNode->addChild($noStakeholderItem);
        }

        return $rootNode;
    }

    public function getTimeTrackingReport( $input = NULL )
    {
	    $data['user']       = $this->getUsersTimeReport( $input );
        $data['customer']   = $this->getCustomersTimeReport( $input );

    	return $data;
    }

    private static function restrictQbByTime($qb, $input) {
        if (isset($input['from'])) {
           $qb->andWhere('t.day >= :fromDate');
           $qb->setParameter(':fromDate', $input['from']);
        }

        if (isset($input['to'])) {
           $qb->andWhere('t.day <= :toDate');
           $qb->setParameter(':toDate', $input['to']);
        }
        return $qb;
    }

    public static function restrictQbByRole($qb, $hasUserJoin = false) {
	    $security = IntranetBundle::$containerExternal->get('security.context');

	    if (!$security->getToken()->getUser()->getCustomer() && !$security->isGranted('ROLE_TIMETRACKINGS_ALL')) {
		    if ($security->isGranted('ROLE_TIMETRACKINGS_OWNGROUP')) {
                if (!$hasUserJoin) {
		            $qb->join('t.user', 'u');
                }
		        $qb->andWhere('u.group = :group');
		        $qb->setParameter('group', $security->getToken()->getUser()->getGroup());
		    } else {
		        $qb->andWhere('t.user = :user');
		        $qb->setParameter('user', $security->getToken()->getUser());
		    }
	    }

        return $qb;
    }
    
    public function findByBudgetPeriod(BudgetPeriod $bp, $forPieChart = false) {
	    $qb = $this->createQueryBuilder('t');
	    $qb->select(array('IDENTITY(t.tariff) as tariff', 'DATE_FORMAT(t.day, \'%Y-%m\') as month', 'SUM(t.hours) as hours'));
      $qb->addGroupBy('t.tariff');
      $qb->addGroupBy('month');

      if ($forPieChart) {
        $qb->andWhere('IDENTITY(t.tariff) != ' . TimetrackingTariffEnum::WEITERBERECHNUNG . ' OR t.campaign IS NULL');
      }
      $qb->andWhere('t.day >= :fromDate')->setParameter(':fromDate', $bp->getStart());
      $qb->andWhere('t.day <= :tillDate')->setParameter(':tillDate', $bp->getEnd());

      $customerRepository = $this->getEntityManager()->getRepository('IntranetBundle:Customer');
      $cids = $customerRepository->getCompleteChildParentMapDown($bp->getCustomer()->getId());
      $cids = array_keys($cids);
      $cids[] = $bp->getCustomer()->getId();
      $qb->andWhere('t.customer IN (:customerChildren)')->setParameter(':customerChildren', $cids);

      $result = array('data' => array(), 'months' => array());
      $months = array();
	    foreach ($qb->getQuery()->getResult() as $row) {
	      $result['data'][$row['tariff']][$row['month']] = $row['hours'];
	      $result['months'][$row['month']] = 1;
	    }
	    ksort($result['months']);
	    uksort($result['data'], function($a, $b) {
	      if (!$a) {
	        return 1;
	      } else if (!$b) {
	        return -1;
	      } else {
	        $price_a = TimetrackingTariffEnum::getPrice($a);
	        $price_b = TimetrackingTariffEnum::getPrice($b);
	        if ($price_a == $price_b) {
	          return $a < $b ? -1 : 1;
	        } else {
	          return $price_a > $price_b ? -1 : 1;
	        }
	      }
	    });
	    foreach ($result['months'] as $key => $val) {
	      $result['months'][$key] = date('M y', strtotime("$key-01"));
	    }
	    return $result;
    }
}

class TimeTrackingHierarchyItem {
    private $label = '';
    private $hasHours;
    private $children = array();
    private $hoursByTariff = array();

    public function __construct() {
        $this->hoursByTariff[0] = 0;
        foreach (TimetrackingTariffEnum::getTitles() as $key => $val) {
            $this->hoursByTariff[$key] = 0;
        }
    }    

    public function setLabel($label) {
        $this->label = $label;
    }

    public function getLabel() {
        return $this->label;
    }

    public function addHours($hours, $tariff = null) {
        if (isset($this->hoursByTariff[(int)$tariff])) {
            $this->hoursByTariff[(int)$tariff] += $hours;
        } else {
            $this->hoursByTariff[(int)$tariff] = $hours;
        }
        $this->hasHours = true;
    }

    public function addChild(TimeTrackingHierarchyItem $child) {
        $this->children[] = $child;
    }

    public function getCummulatedData() {
        $ret = $this->hoursByTariff;        
        foreach ($this->children as $child) {
            $temp = $child->getCummulatedData(); // this could be optimized if performance becomes a concern
            foreach ($temp as $key => $val) {
                $ret[$key] += $val;
            }
        }
        return $ret;
    }

    public function hasChildren() {
        return count($this->children) > 0;
    }

    public function hasHours() {
        return $this->hasHours;
    }

    public function isEmpty() {
        return !$this->hasChildren() && !$this->hasHours();
    }

    public function getChildren() {
        return $this->children;
    }
}
