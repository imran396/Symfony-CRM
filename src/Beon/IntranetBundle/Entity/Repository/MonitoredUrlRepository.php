<?php

namespace Beon\IntranetBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * monitoredurlRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MonitoredUrlRepository extends FilteredRepository
{    
    public function findByIsOwnWebsite($page = 0, $itemsOnPage, $isOwnWebsite)
    {
	$qb = $this->getEntityManager()->createQueryBuilder()
	->select('MonitoredUrl')
	->from('IntranetBundle:MonitoredUrl', 'MonitoredUrl')
	->innerjoin('MonitoredUrl.customer','Customer')
	->where('Customer.contractend is NULL or Customer.contractend >CURRENT_DATE()')
	->andwhere('MonitoredUrl.isOwnWebsite = :isOwnWebsite')
	->orderBy('MonitoredUrl.lastCheck','DESC')
	->setFirstResult($page * $itemsOnPage)
	->setMaxResults($itemsOnPage)
	->setParameter('isOwnWebsite', $isOwnWebsite);
	
	if ($this->getCustomerFilter()!=null) {
	    $customerEntity = $this->getCustomerFilter();
	    $qb = $qb->andWhere('MonitoredUrl.customer IN (:customerIds)')->setParameter('customerIds', $customerEntity);
	    
        } 
	
	return $qb->getQuery()->execute();
    }
    
    public function countByIsOwnWebsite($page = 0, $itemsOnPage, $isOwnWebsite)
    {
	     $qb = $this->getEntityManager()->createQueryBuilder()
	    ->select('COUNT(MonitoredUrl.id)')
	    ->from('IntranetBundle:MonitoredUrl', 'MonitoredUrl')
	    ->innerjoin('MonitoredUrl.customer','Customer')
	    ->where('Customer.contractend is NULL or Customer.contractend >CURRENT_DATE()')
	    ->andwhere('MonitoredUrl.isOwnWebsite = :isOwnWebsite')
	    ->setParameter('isOwnWebsite', $isOwnWebsite);
	
	    if ($this->getCustomerFilter()!=null) {
	        $customerEntity = $this->getCustomerFilter();
	        $qb = $qb->andWhere('MonitoredUrl.customer IN (:customerIds)')->setParameter('customerIds', $customerEntity);   
      } 
     
	    $totalItems = $qb->getQuery()->getSingleScalarResult();
	
	    return ceil($totalItems / $itemsOnPage);
    }
    
    public function findWithNotes($id)
    {
	return $this->getEntityManager()->createQueryBuilder()
	->select('MonitoredUrl', 'notes')
	->from('IntranetBundle:MonitoredUrl', 'MonitoredUrl')
	->leftjoin('MonitoredUrl.customer','customer')
	->leftjoin('MonitoredUrl.notes','notes')
	->where('MonitoredUrl.id=:id')
	->setParameter('id', $id)
	->getQuery()->getResult();
    }
}
