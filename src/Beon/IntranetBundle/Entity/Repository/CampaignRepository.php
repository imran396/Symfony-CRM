<?php
namespace Beon\IntranetBundle\Entity\Repository;

use Beon\IntranetBundle\Entity\Customer;
use Doctrine\ORM\EntityRepository;
use Beon\IntranetBundle\Entity\Campaign;
use Beon\IntranetBundle\Enums\SupplierTypesEnum;
use Beon\IntranetBundle\Enums\TimetrackingTariffEnum;
use Doctrine\ORM\QueryBuilder;

/**
 * CompanyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CampaignRepository extends FilteredRepository
{
    const ITEMS_ON_PAGE = 10;

    private function filterByCustomer(QueryBuilder $qb, $customerIds)
    {
        if ($customerIds) {
            $qb = $qb->andWhere('c.customer IN (:customerIds)')
                ->setParameter('customerIds', $customerIds);

	} else if ($this->getCustomerFilter()!=null) {
	    $customerIds = $this->getCustomerFilter();
	    $qb = $qb->andWhere('c.customer IN (:customerIds)')->setParameter('customerIds', $customerIds);

        }

        return $qb;
    }

    private function qbUnapproved($customerIds = array())
    {
        $qb = $this->createQueryBuilder('c')
            ->where('c.approved = 0')
            ->andWhere('c.denied = 0')
            ->andWhere('c.deleted = 0')
            ->orderBy('c.title');
        $this->filterByCustomer($qb, $customerIds);

        return $qb;
    }

    public function findUnapproved($page, $customerIds = array(), $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        $qb = $this->qbUnapproved($customerIds);
        $this->setLimits($qb, $page, $itemsOnPage);

        return $qb->getQuery()->getResult();
    }

    public function getUnapprovedPagesCount($customerIds = array(), $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        return ceil(
            $this->qbUnapproved($customerIds)->select('count(c.id)')->getQuery()->getSingleScalarResult() / $itemsOnPage
        );

    }

    private function qbArchived($customerIds = array())
    {
        $qb = $this->createQueryBuilder('c')
            ->where('c.end < :currentDate')
            ->andWhere('c.approved <> 0')
            ->andWhere('c.denied = 0')
            ->andWhere('c.deleted = 0')
            ->setParameter('currentDate', new \DateTime())
            ->orderBy('c.title');

        $this->filterByCustomer($qb, $customerIds);

        return $qb;
    }

    public function findArchived($page, $customerIds = array(), $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        $qb = $this->qbArchived($customerIds);
        $this->setLimits($qb, $page, $itemsOnPage);

        return $qb->getQuery()->getResult();
    }

    public function getArchivedPagesCount($customerIds = array(), $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        return ceil(
            $this->qbArchived($customerIds)->select('count(c.id)')->getQuery()->getSingleScalarResult() / $itemsOnPage
        );
    }

    private function qbRunning($customerIds = array())
    {
        $qb = $this->createQueryBuilder('c')
            ->where('c.end > :currentDate')
            ->andWhere('c.start < :currentDate')
            ->andWhere('c.approved <> 0')
            ->andWhere('c.denied = 0')
            ->andWhere('c.deleted = 0')
            ->setParameter('currentDate', new \DateTime())
            ->orderBy('c.title');

        $this->filterByCustomer($qb, $customerIds);

        return $qb;
    }


    public function findRunning($page, $customerIds = array(), $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        $qb = $this->qbRunning($customerIds);
        $this->setLimits($qb, $page, $itemsOnPage);

        return $qb->getQuery()->getResult();

    }

    public function getRunningPagesCount($customerIds = array(), $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        return ceil(
            $this->qbRunning($customerIds)->select('count(c.id)')->getQuery()->getSingleScalarResult() / $itemsOnPage
        );
    }

    private function qbFuture($customerIds = array())
    {
        $qb = $this->createQueryBuilder('c')
            ->where('c.start > :currentDate')
            ->andWhere('c.approved <> 0')
            ->andWhere('c.denied = 0')
            ->andWhere('c.deleted = 0')
            ->setParameter('currentDate', new \DateTime())
            ->orderBy('c.title');

        $this->filterByCustomer($qb, $customerIds);

        return $qb;
    }

    public function findFuture($page, $customerIds = array(), $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        $qb = $this->qbFuture($customerIds);
        $this->setLimits($qb, $page, $itemsOnPage);

        return $qb->getQuery()->getResult();
    }

    public function getFuturePagesCount($customerIds = array(), $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        return ceil(
            $this->qbFuture($customerIds)->select('count(c.id)')->getQuery()->getSingleScalarResult() / $itemsOnPage
        );
    }

    private function setLimits(QueryBuilder $queryBuilder, $page, $itemsOnPage)
    {
        return $queryBuilder
            ->setMaxResults($itemsOnPage)
            ->setFirstResult($page * $itemsOnPage);
    }

    private function qbDenied($customerIds = array())
    {
        $qb = $this->createQueryBuilder('c')
        ->where('c.denied <> 0')
        ->andWhere('c.deleted = 0');
        $this->filterByCustomer($qb, $customerIds);

        return $qb;
    }

    public function findDenied($page, $customerIds = array(), $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        $qb = $this->qbDenied($customerIds);
        $this->setLimits($qb, $page, $itemsOnPage);

        return $qb->getQuery()->getResult();
    }

    public function getDeniedPagesCount($customerIds = array(), $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        return ceil(
            $this->qbDenied($customerIds)->select('count(c.id)')->getQuery()->getSingleScalarResult() / $itemsOnPage
        );
    }

    private function qbDeleted($customerIds = array())
    {
        $qb = $this->createQueryBuilder('c')
        ->where('c.deleted <> 0');
        $this->filterByCustomer($qb, $customerIds);

        return $qb;
    }

    public function findDeleted($page, $customerIds = array(), $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        $qb = $this->qbDeleted($customerIds);
        $this->setLimits($qb, $page, $itemsOnPage);

        return $qb->getQuery()->getResult();
    }

    public function getDeletedPagesCount($customerIds = array(), $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        return ceil(
            $this->qbDeleted($customerIds)->select('count(c.id)')->getQuery()->getSingleScalarResult() / $itemsOnPage
        );
    }

    public function getAllByCustomer($customer_ids = null)
    {

        return $this
            ->createQueryBuilder('c')
            ->select('c.title,c.id,c.start,c.end,c.createdat as campaign,c.createdat,c.approved,c.approvalmailsent')
            ->where('c.customer IN (:customers)')
            ->setParameter('customers', $customer_ids)
            ->orderBy('c.createdat', 'DESC')
            ->getQuery()
            //->setMaxResults(10)
            ->getResult();

    }


    private function getSupplierTypes($customer_id)
    {

        return $this
            ->createQueryBuilder('c')
            ->select('IDENTITY(s.supplierType) as supplierType')
            ->leftJoin('c.supplier', 's')
            ->where('c.customer = :customer AND c.approved = 1')
            ->setParameter('customer', $customer_id)
            ->groupBy('s.supplierType')
            ->getQuery()
            ->getResult();

    }

    public function getCampaignBudget($customer_id = null, $supplier_type = null)
    {

        return $this
            ->createQueryBuilder('c')
            ->select('c.start,c.end,c.budget')
            ->leftJoin('c.supplier', 's')
            ->where('c.customer = :customer AND s.supplierType = :suplierType AND c.approved = 1')
            ->setParameter('customer', $customer_id)
            ->setParameter('suplierType', $supplier_type)
            ->getQuery()
            ->getResult();

    }

    public function getOutterPartialBudget($campaign, $budget)
    {

        list($campaignEndDate, $campaignStartDate, $budgetEnd, $budgetStart) = $this->getTimestamp($campaign, $budget);

        $campaignduration = $campaignEndDate - $campaignStartDate;
        $campaigndurationInBudget = $budgetEnd - $budgetStart;

        return $this->getpartialBudget($campaign, $campaignduration, $campaigndurationInBudget);
    }


    public function getInnerPartialBudget($campaign, $budget)
    {

        list($campaignEndDate, $campaignStartDate, $budgetEnd, $budgetStart) = $this->getTimestamp($campaign, $budget);
        $campaignduration = $campaignEndDate - $campaignStartDate;
        $campaigndurationInBudget = $campaignEndDate - $budgetStart;

        return $this->getpartialBudget($campaign, $campaignduration, $campaigndurationInBudget);
    }


    public function getDashBoardPieChartData($customer_id)
    {
        $paiechartData = array();
        $currentBudgets = $this->getEntityManager()->getRepository('IntranetBundle:BudgetPeriod')->getCurrentBudget(
            $customer_id
        );

        foreach ($currentBudgets as $budget) {
            $paiechartData[] = $this->getPieChartData($customer_id, $budget);
        }

        return $paiechartData;

    }

    public function getPieChartData($customer_id, $budget = null)
    {
        $supplierTypes = $this->getSupplierTypes($customer_id);

        if ($budget) {
            $budgetArr = array(
              'start' => $budget->getStart(),
              'end' => $budget->getEnd(),
              'budget'=> $budget->getBudget()
            );
            $budgetstart = $budget->getStart()->format('Y-m-d');
            $budgetend = $budget->getEnd()->format('Y-m-d');

            $CampaignTotalBudget = array();

            foreach ($supplierTypes as $supplierType) {

                $campaigns = $this->getCampaignBudget($customer_id, $supplierType['supplierType']);

                foreach ($campaigns as $key => $campaign) {

                    $campaignEndDate = $campaign['end']->format('Y-m-d');
                    $campaignStartDate = $campaign['start']->format('Y-m-d');

                    if (!isset($Campaignbudget[$supplierType['supplierType']])) {
                        $CampaignTotalBudget[$supplierType['supplierType']] = 0;
                    }

                    if ($campaignStartDate >= $budgetstart && $campaignEndDate <= $budgetend) {
                        $CampaignTotalBudget[$supplierType['supplierType']] += $campaign['budget'];

                    } elseif ($campaignStartDate >= $budgetstart && $campaignEndDate >= $budgetend && $campaignStartDate <= $budgetend) {
                        $CampaignTotalBudget[$supplierType['supplierType']] += $this->getOutterPartialBudget(
                            $campaign,
                            $budgetArr
                        );

                    } elseif ($campaignStartDate <= $budgetstart && $campaignEndDate >= $budgetend) {
                        $CampaignTotalBudget[$supplierType['supplierType']] += $this->getInnerPartialBudget(
                            $campaign,
                            $budgetArr
                        );
                    } elseif ($campaignStartDate <= $budgetstart && $campaignEndDate <= $budgetend && $budgetstart <= $campaignEndDate) {
                        $CampaignTotalBudget[$supplierType['supplierType']] += $this->getInnerPartialBudget(
                            $campaign,
                            $budgetArr
                        );

                    }

                }
            }
            
            $ttRepo = $this->getEntityManager()->getRepository('IntranetBundle:Timetracking');
            $ttArr = $ttRepo->findByBudgetPeriod($budget, true);
            foreach (TimetrackingTariffEnum::getCategories() as $category => $tariffs) {
              $sum = 0;
              foreach ($tariffs as $tariff) {
                if (isset($ttArr['data'][$tariff])) {
                  $hours = array_sum($ttArr['data'][$tariff]);
                  $sum += $hours * TimetrackingTariffEnum::getPrice($tariff);
                }
              }
              if ($sum > 0) {
                $CampaignTotalBudget[$category] = $sum;
              }
            }

            return $this->preparePieChartJson($CampaignTotalBudget, $budgetArr);
        }

        return null;
    }


    public function preparePieChartJson($CampaignTotalBudget, $budget)
    {
        $colors = SupplierTypesEnum::getConsistentColors();
        $total = 0;
        $i = 0;

        foreach ($CampaignTotalBudget as $type => $subtotal) {
            if (!is_numeric($type)) {
                $budget_type[$i]['label'] = $type;
                $budget_type[$i]['color'] = TimetrackingTariffEnum::getColorForCategory($type);
            } else if ($subtotal > 0) {
                SupplierTypesEnum::loadOneOff($type);
                $budget_type[$i]['label'] = SupplierTypesEnum::getTitle($type);
                $budget_type[$i]['color'] = isset($colors[$type]) ? $colors[$type] : $colors[SupplierTypesEnum::OtherType];
            }
            
            if ($subtotal > 0) {            
                $budget_type[$i]['data'] = round($subtotal);
                $total += $subtotal;
                $i++;
            }
        }

        $reserve = $budget['budget'] - $total;
        if ($reserve > 0) {
            $budget_type[$i]['label'] = 'reserve';
            $budget_type[$i]['color'] = $colors[SupplierTypesEnum::Reserve];
            $budget_type[$i]['data'] = round($reserve);
        }
        return [$budget_type, $reserve, $budget];
    }


    /**
     * @param $campaign
     * @param $budget
     * @return array
     */
    public function getTimestamp($campaign, $budget)
    {
        $campaignEndDate = strtotime($campaign['end']->format('Y-m-d'));
        $campaignStartDate = strtotime($campaign['start']->format('Y-m-d'));
        $budgetStart = strtotime($budget['start']->format('Y-m-d'));
        $budgetEnd = strtotime($budget['end']->format('Y-m-d'));

        return array($campaignEndDate, $campaignStartDate, $budgetEnd, $budgetStart);
    }


    public function getpartialBudget($campaign, $campaigdurationTimeStamp, $campaigdurationInbudgetTimeStamp)
    {
        $capaigndays = floor($campaigdurationTimeStamp / (60 * 60 * 24)) + 1;
        $campaigndaysInBudget = floor($campaigdurationInbudgetTimeStamp / (60 * 60 * 24)) + 1;
        $CampaignCostPerday = $campaign['budget'] / $capaigndays;

        return $CampaignCostPerday * $campaigndaysInBudget;
    }

    public function getSupplierGroupCampaign($supplierGroup)
    {
        return $this
            ->createQueryBuilder('c')
            ->leftJoin('c.supplier', 's')
            ->where('s.group = :supplierGroup')
            ->setParameter('supplierGroup', $supplierGroup)
            ->getQuery()
            ->getResult();

    }

    public function forCustomerView($customerIds)
    {
        $qb = $this->createQueryBuilder('c');

        /** @var $customerRepository CustomerRepository */
        $customerRepository = $this->getEntityManager()->getRepository('IntranetBundle:Customer');
        $customers = $customerRepository->findStakeholdersRegardingToLevel($customerIds);

        if ($customers) {
            $qb->orWhere('c.customer IN (:customerChildren)')->setParameter(':customerChildren', $customers);
        }

        $qb->orderBy('c.start', 'ASC');

        return $qb->getQuery()->getResult();
    }


    public function insertDuplicateCampaignByStakeHolderChildern($campaign, $customerIds)
    {

        $uploads = $this->getEntityManager()->getRepository('IntranetBundle:Upload')->findBy(
            array('campaign' => $campaign)
        );
        $newCampaign = clone $campaign;
        $newCampaign->setCustomer($customerIds);
        $newCampaign->setDuplicateOf($campaign);
        $newCampaign->resetState();
        $this->_em->persist($newCampaign);

        foreach ($uploads as $upload) {
            $newupload = clone $upload;
            $newupload->setCampaign($newCampaign);
            $this->_em->persist($newupload);
        }

        $this->_em->flush();
    }

    public function getCampaignSavingReport( $input = null )
    {
        $qb = $this->createQueryBuilder( 'cs' )
            ->innerJoin( 'cs.customer', 'c' )
            ->andWhere( 'cs.approved = true' );

        if (isset($input['from'])) {
           $qb->andWhere('cs.end >= :fromDate');
           $qb->setParameter(':fromDate', $input['from']);
        }

        if (isset($input['to'])) {
           $qb->andWhere('cs.start <= :toDate');
           $qb->setParameter(':toDate', $input['to']);
        }

        $results = $qb->getQuery()->getResult();
        $cidLookup = array();
    	foreach ($results as $campaign) {
            $cid = $campaign->getCustomer()->getId();
            if (array_key_exists($cid, $cidLookup)) {
                $currentStakeholderItem = $cidLookup[$cid];
            } else {
                $currentStakeholderItem = new CampaignSavingsHierarchyItem();
                $cidLookup[$cid] = $currentStakeholderItem;
            }
            $currentStakeholderItem->addCampaign($campaign);
        }

        // fetch complete child->parent map including "grand-parents"
        $parentChildMap = $this->getEntityManager()->getRepository('IntranetBundle:Customer')->getCompleteChildParentMapUp(array_keys($cidLookup));

        // complete cid lookuptable
        $stakeholders = $this->getEntityManager()->getRepository('IntranetBundle:Customer')->getCids(array_keys($parentChildMap));
        foreach ($stakeholders as $stakeholder) {
            if (!array_key_exists($stakeholder->getId(), $cidLookup)) {
                $cidLookup[$stakeholder->getId()] = new CampaignSavingsHierarchyItem();
            }
            $cidLookup[$stakeholder->getId()]->setLabel($stakeholder->__toString());
        }

        // stitch hierarchy together
        $rootNode = new CampaignSavingsHierarchyItem();
        foreach ($parentChildMap as $cid => $parent) {
            $currentItem = $cidLookup[$cid];
            if ($parent) {
                $cidLookup[$parent]->addChild($currentItem);
            } else {
                $rootNode->addChild($currentItem);
            }
        }

        return $rootNode;
    }

    public function getCPSPMReport( $input = NULL )
    {
       $qb = $this->createQueryBuilder( 'cs' );
       if( isset($input['type']) && $input['type']->getId() != SupplierTypesEnum::RadioType )
       {
           $qb->select( 'cs.id as campaignId, c.name, cs.numberOfAds, cs.title, s.name as supplierName,
            ( cs.budget / cs.numberOfAds  / cs.audiencesize * 1000 ) as
            cpm' )
               ->leftJoin( 'cs.customer', 'c' )
               ->leftJoin( 'cs.supplier', 's' );
       } else
       {
            $qb->select( 'cs.id as campaignId, c.name, cs.title, s.name as supplierName,
            ( ( ( cs.budget / cs.numberOfSeconds ) / cs.audiencesize ) * 1000 ) as
            cpspm' )
               ->leftJoin( 'cs.customer', 'c' )
               ->leftJoin( 'cs.supplier', 's' );
       }

        if (!empty($input['type'])) {
           $qb->where( 's.supplierType = :type' );
           $qb->setParameter( 'type', $input['type'] );
        }

       if (!empty($input['from'])) {
           $qb->andWhere('cs.end >= :fromDate');
           $qb->setParameter(':fromDate', $input['from']);
       }

       if (!empty($input['to'])) {
           $qb->andWhere('cs.start <= :toDate');
           $qb->setParameter(':toDate', $input['to']);
       }

       if (!empty($input['freq'])) {
           $qb->andWhere('s.frequency = :freq');
           $qb->setParameter(':freq', $input['freq']);
       }

       if (!empty($input['city'])) {
           $qb->andWhere('s.city = :city');
           $qb->setParameter(':city', $input['city']);
       }

        $result = array();
        if( isset($input['type']) && $input['type']->getId() != SupplierTypesEnum::RadioType )
        {
           $qb->orderBy('cpm', 'ASC');
           $result['type'] = 'cpm';
        } else
        {
           $qb->orderBy('cpspm', 'ASC');
           $result['type'] = 'cpspm';
        }

        $result['data'] = $qb->getQuery()->getResult();
        return $result;
        //echo '<pre>';
        //print_r($result);

    }

    public function findCronData($sentDate)
    {
	    $result = $this->createQueryBuilder('c')
	    ->where('c.lastApprovalMailSentAt < :sentDate')
	    ->andwhere('c.approved = false')
	    ->andwhere('c.denied = false')
	    ->andwhere('c.serializedApprovalMail is not NULL')
	    ->setParameter('sentDate', $sentDate);

	    return $result->getQuery()->execute();
    }
}

class CampaignSavingsHierarchyItem {
    private $label = '';
    private $children = array();
    private $campaigns = array();

    public function setLabel($label) {
        $this->label = $label;
    }

    public function getLabel() {
        return $this->label;
    }

    public function addChild(CampaignSavingsHierarchyItem $child) {
        $this->children[] = $child;
    }

    public function addCampaign(Campaign $campaign) {
        $this->campaigns[] = $campaign;
    }

    public function hasChildren() {
        return count($this->children) > 0;
    }

    public function hasCampaigns() {
        return count($this->campaigns) > 0;
    }

    public function getChildren() {
        return $this->children;
    }

    public function getCampaigns() {
        return $this->campaigns;
    }

    public function isSummary() {
        return count($this->children) > 0 || count($this->campaigns) > 1;
    }

    public function getSums() {
        $ret = array('budget' => 0, 'regularPrice' => 0);

        foreach ($this->campaigns as $campaign) {
            $ret['budget'] += $campaign->getBudget();
            if ($campaign->getRegularPrice() > $campaign->getBudget()) {
                $ret['regularPrice'] += $campaign->getRegularPrice();
            } else {
                $ret['regularPrice'] += $campaign->getBudget();
            }
        }

        foreach ($this->children as $child) {
            $sums = $child->getSums();
            $ret['budget'] += $sums['budget'];
            $ret['regularPrice'] += $sums['regularPrice'];
        }

        $ret['savings'] = $ret['regularPrice'] - $ret['budget'];
        $ret['savings_percent'] = round($ret['savings'] / $ret['regularPrice'] * 100, 2);

        return $ret;
    }
}
