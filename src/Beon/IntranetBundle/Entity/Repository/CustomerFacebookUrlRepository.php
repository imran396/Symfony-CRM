<?php

namespace Beon\IntranetBundle\Entity\Repository;

use Beon\IntranetBundle\Entity\CustomerFacebookUrl;
use Doctrine\ORM\EntityRepository;
use Beon\IntranetBundle\Entity\Repository\FacebookLikecountRepository;

/**
 * CustomerFacebookUrlRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerFacebookUrlRepository extends EntityRepository
{

    public function saveCustomerUrl($url,$customer){

          $entity =  new CustomerFacebookUrl();
          $entity->setFacebookUrl($url);
          $entity->setCustomer($customer);
          $entity->setIsOwn(1);
          $this->_em->persist($entity);
          $this->_em->flush();
    }


    public function checkDuplicateCustomerUrl($url,$customer){
        return $this->findOneBy(array('facebookUrl'=>$url,'customer'=>$customer));
    }


    public function getFlotGraphData($customerId){

        $customerFacebookUrls = $this->findBy(array('customer' => $customerId), array('isOwn' => 'DESC'));
        $mulipleLikeCount = array();

        foreach($customerFacebookUrls as $customerFacebookUrl){

          $urlId = $customerFacebookUrl->getFacebookUrl()->getId();
          $customerUrls = $this->getEntityManager()->getRepository('IntranetBundle:FacebookLikecount')->getLikeData($urlId);
          $data_likes = array();
          $isown = $customerFacebookUrl->getIsOwn();

          $lineType = $isown ? 'lines' : 'dashes';

          foreach($customerUrls as $customerUrl){

            $fblikedate = $customerUrl->getDate()->format('Y-m-d H:i:s');
            $timestamps = strtotime($fblikedate)*1000;
            $data_likes[] =  '['.$timestamps.','.$customerUrl->getLikecount().']';

          }

           $mulipleLikeCount[] = '{data:[' . implode(',', $data_likes) . '], ' . $lineType . ': { show: true }, label: "'.$customerFacebookUrl->getFacebookUrl()->getAlias().'"}' ;

        }

         return '['.implode(',',$mulipleLikeCount).']';
    }



}
