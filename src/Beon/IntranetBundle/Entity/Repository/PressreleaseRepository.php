<?php
namespace Beon\IntranetBundle\Entity\Repository;

use Beon\IntranetBundle\Entity\Customer;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * CompanyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PressreleaseRepository extends FilteredRepository
{
    const ITEMS_ON_PAGE = 10;

    public function getAllByCustomer($customer_ids = null)
    {
        return $this
            ->createQueryBuilder('p')
            ->select('p.title,p.id,p.createdat,p.createdat as press, p.approved, p.approvalmailsent')
            ->where('p.customer IN(:customers)')
            ->setParameter('customers', $customer_ids)
            ->orderBy('p.createdat', 'DESC')
            ->getQuery()
            //->setMaxResults(10)
            ->getResult();
    }


    private function setLimits(QueryBuilder $queryBuilder, $page, $itemsOnPage)
    {
        return $queryBuilder
            ->setMaxResults($itemsOnPage)
            ->setFirstResult($page * $itemsOnPage);
    }

    private function filterByCustomer(QueryBuilder $qb, $customerIds)
    {
        
        if ($this->getUserFilter()!=null) {
	    $userEntity = $this->getUserFilter();
	    $qb = $qb->andWhere('c.user=:userEntity')->setParameter('userEntity', $userEntity);
        }
	

        if ($customerIds) {
	    $qb = $qb->andWhere('c.customer IN (:customerIds)')
	    ->setParameter('customerIds', $customerIds);
        } else if ($this->getCustomerFilter()!=null) {
	    $customerIds = $this->getCustomerFilter();
	    $qb = $qb->andWhere('c.customer IN (:customerIds)')->setParameter('customerIds', $customerIds);
        }
        
        

        return $qb;
    }

    private function qbApproved($customerIds)
    {

        $qb = $this->createQueryBuilder('c')->where('c.approved = 1 AND c.submitted = 0 AND c.deleted = 0');
        $this->filterByCustomer($qb, $customerIds);
        return $qb;
    }

    public function findApproved($page, $customerIds, $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        $qb = $this->qbApproved($customerIds);
        $qb = $this->setLimits($qb, $page, $itemsOnPage);

        return $qb->getQuery()->getResult();
    }

    public function getApprovedPagesCount($customerIds, $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        return ceil($this->qbApproved($customerIds)->select('count(c.id)')->getQuery()->getSingleScalarResult() / $itemsOnPage);
    }

    private function qbSubmitted($customerIds)
    {
        $qb = $this->createQueryBuilder('c')->where('c.submitted = 1 OR c.approved = 1 AND c.deleted = 0');
        $this->filterByCustomer($qb, $customerIds);
        return $qb;
    }

    public function findSubmitted($page, $customerIds, $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        $qb = $this->qbSubmitted($customerIds);
        $qb = $this->setLimits($qb, $page, $itemsOnPage);

        return $qb->getQuery()->getResult();
    }

    public function getSubmittedPagesCount($customerIds, $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        return ceil($this->qbSubmitted($customerIds)->select('count(c.id)')->getQuery()->getSingleScalarResult() / $itemsOnPage);
    }

    private function qbApprovalEmailSend($customerIds)
    {
        $qb = $this->createQueryBuilder('c')->where(
            'c.approvalmailsent = 1 AND c.submitted = 0 AND c.approved = 0 AND c.deleted = 0'
        );
        $this->filterByCustomer($qb, $customerIds);
        return $qb;
    }

    public function findApprovalEmailSend($page, $customerIds, $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        $qb = $this->qbApprovalEmailSend($customerIds);
        $qb = $this->setLimits($qb, $page, $itemsOnPage);

        return $qb->getQuery()->getResult();
    }

    public function getApprovalEmailSendPagesCount($customerIds, $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        return ceil(
            $this->qbApprovalEmailSend($customerIds)->select('count(c.id)')->getQuery()->getSingleScalarResult() / $itemsOnPage
        );
    }

    private function qbDeleted($customerIds)
    {
        $qb = $this->createQueryBuilder('c')->where('c.deleted = 1');
        $this->filterByCustomer($qb, $customerIds);

        return $qb;
    }

    public function findDeleted($page, $customerIds, $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        $qb = $this->qbDeleted($customerIds);
        $qb = $this->setLimits($qb, $page, $itemsOnPage);

        return $qb->getQuery()->getResult();
    }

    public function getDeletedPagesCount($customerIds, $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        return ceil($this->qbDeleted($customerIds)->select('count(c.id)')->getQuery()->getSingleScalarResult() / $itemsOnPage);
    }

    private function qbDraft($customerIds)
    {

        $qb = $this->createQueryBuilder('c')->where('c.approvalmailsent = 0 AND c.submitted = 0 AND c.approved = 0 AND c.deleted = 0');
        $this->filterByCustomer($qb, $customerIds);
        return $qb;
    }

    public function findDraft($page, $customerIds, $itemsOnPage = self::ITEMS_ON_PAGE)
    {

        $qb = $this->qbDraft($customerIds);
        $qb = $this->setLimits($qb, $page, $itemsOnPage);

        return $qb->getQuery()->getResult();
    }

    public function getDraftPagesCount($customerIds, $itemsOnPage = self::ITEMS_ON_PAGE)
    {
        return ceil($this->qbDraft($customerIds)->select('count(c.id)')->getQuery()->getSingleScalarResult() / $itemsOnPage);
    }

    public function forCustomerView($customer)
    {
        $qb = $this->createQueryBuilder('p');

        /** @var $customerRepository CustomerRepository */
        $customerRepository = $this->getEntityManager()->getRepository('IntranetBundle:Customer');
        /** @var $customer Customer */
        $customers = $customerRepository->findStakeholdersRegardingToLevel($customer);

        if ($customers) {
            $qb->orWhere('p.customer IN (:customerChildren)')->setParameter(':customerChildren', $customers);
        }

        $qb->orderBy('p.id');

        return $qb->getQuery()->getResult();
    }

    public function insertDuplicatePressreleaseByStakeHolderChildern($pressrelease, $customer)
    {

        $uploads = $this->getEntityManager()->getRepository('IntranetBundle:Upload')->findBy(
            array('pressrelease' => $pressrelease)
        );
        $newPressrelease = clone $pressrelease;
        $newPressrelease->setCustomer($customer);
        $newPressrelease->setDuplicateOf($pressrelease);
        $newPressrelease->resetState();
        $this->_em->persist($newPressrelease);

        foreach ($uploads as $upload) {
            $newupload = clone $upload;
            $newupload->setPressrelease($newPressrelease);
            $this->_em->persist($newupload);
        }

        $this->_em->flush();
    }    
        
    public function findCronData($sentDate)
    {
	    $result = $this->createQueryBuilder('p')
	    ->where('p.lastApprovalMailSentAt < :sentDate')
	    ->andwhere('p.approved = false')
	    ->andwhere('p.deleted = false')
	    ->andwhere('p.serializedApprovalMail is not NULL')
	    ->setParameter('sentDate', $sentDate);

	    return $result->getQuery()->execute();
    }
}
